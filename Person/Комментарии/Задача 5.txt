// Подключение библиотеки:
#include <iostream>  // для ввода/вывода данных
#include <sstream>   // для работы со строками
#include <ctime>     // для работы с датой и временем
#include <vector>    // для работы с динамическими массивами
#include <Windows.h> // для работы языка консоли

using namespace std; // Использование пространства имен std

// Объявление перечисления для определения пола человека
enum GenderType{
	male,		// Мужчина
	female,		// Женщина
	totalGender // Общее количество полов
};

// Объявление массива строк для обозначения пола
string GenderString[totalGender] = { "Мужчина", "Женщина" };

// Объявление структуры для хранения информации о человеке
struct Human { 
	// Определение переменных структуры
	string mSurname { "" }; // Фамилия
	string mName{ "" };		// Имя
	double mWeight { 0.0 }; // Вес
	double mHeight{ 0.0 };	// Рост
	GenderType mGender{ };	// Пол

	// Определение методов-getter для хранения значений переменных
	string Surname() const { return mSurname; }
	string Name() const { return mName; }
	double Weight() const { return mWeight; }
	double Height() const { return mHeight; }
	GenderType Gender() const { return mGender; }

	// Определение методов-setter для установки значений переменных
	string Surname(string value) { return mSurname = value; }
	string Name(string value) { return mName = value; }
	double Weight(double value) { return mWeight = value; }
	double Height(double value) { return mHeight = value; }
	GenderType Gender(GenderType value) { return mGender = value; }

	// Методы для проверки пола:
	// Проверка, является ли человек мужчиной
	bool IsMale() const { return mGender == male; }
	// Проверка, является ли человек женщиной
	bool IsFemale() const { return mGender == female; }

	// Метод для преобразования числа с плавающей точкой в строку
    string ValueString(double value) const {
		ostringstream ss; // Создание объекта ostringstream
		ss << value; // Запись значения value в ss
		return ss.str(); // Преобразование содержимого ss в строку и возвращение этой строки
	}

	// Функция для получения информации о человеке в виде строки
	string GetInfoPerson() const {
		return Surname() + " " + Name() + " | Вес: " + ValueString(Weight()) + " кг | Рост: " + ValueString(Height()) + " см | Пол: " + GenderString[Gender()];
	}

	// Функция для вывода информации о человеке
	void PrintInfoPerson() const {
		cout << GetInfoPerson();
	}
} h;

// Обьявление массивы имён мужчин и женщин
string MaleNames[5] = { "Александр", "Михаил", "Максим", "Артём", "Лев" };
string FemaleNames[5] = { "Софья", "Мария", "Ева", "Виктория", "Анна" };

// Обьявление массив фамилий мужчин
string MaleSurnames[10] = { "Иванов", "Смирнов", "Кузнецов", "Попов", "Соколов", "Лебедев", "Козлов", "Новиков", "Морозов", "Петров" };

// Объявление прототипа функций
int langConsole(int);
int Put(int);
Human GeneratedHuman();
void fillHumanArray(vector<Human>& , int);
double averageWeight(vector<Human>&);
double averageHeight(vector<Human>&);
void printHumanAndAvg(vector<Human>&, double, double);
void sortByWeight(vector<Human>&);
void sortByHeight(vector<Human>&);
void printHumanSort(vector<Human>&);

int main()
{
	langConsole(1251); // Установка языка консоли
	srand(time(0)); // Инициализация генератора случайных чисел
	int n = Put(0); // Получение числа людей от пользователя
	vector<Human> humans; // Создание вектора для хранения людей
	fillHumanArray(humans, n); // Заполнение вектора случайными людьми

	// Вывод информации о людях, среднего веса и роста 
	double avgWeight = averageWeight(humans);
	double avgHeight = averageHeight(humans);
	printHumanAndAvg(humans, avgWeight, avgHeight);

	// Вывод информации о людях возрастаню по росту и весу
	cout << "Cписок всех людей по росту по возрастанию:" << endl;
	sortByHeight(humans);
	printHumanSort(humans);

	cout << "\nCписок всех людей по весу по возрастанию:" << endl;
	sortByWeight(humans);
	printHumanSort(humans);

	return 0;
}

// Функция для изменения языка консоли
int langConsole(int codePage) {
	SetConsoleCP(codePage); // Установка кодовой страницы ввода для консоли
	SetConsoleOutputCP(codePage); // Установка кодовой страницы вывода для консоли
	return codePage; // Возвращение установленной кодовой страницы
}

// Функция для ввода данных пользователя
int Put(int n) {
	do {
		cout << "Введите целое число от 10 до 100: ";
		cin >> n;
		if (n < 10 || n > 100) {
			cout << "Некорректное значение. " << n << endl;
		}
	} while (n < 10 || n > 100);
	return n;
}

// Функция для генерации случайного человека
Human GeneratedHuman() {
	
	GenderType gender = rand() % totalGender ? male : female; // Генерация случайного пола (мужской или женский)
	// Генерация случайной фамилии. Если пол мужской, то берется из списка мужских фамилий, если женский - из списка мужских + а
	string surname = gender == male ? MaleSurnames[rand() % 10] : MaleNames[rand() % 5] + "а";
	// Генерация случайного имени. Если пол мужской, то берется из списка мужских имен, если женский - из списка женских
	string name = gender == male ? MaleNames[rand() % 5] : FemaleNames[rand() % 5];
	double weight = rand() % 160 + 40; // Генерация случайного веса (от 40 до 200 кг)
	double height = rand() % 100 + 110; // Генерация случайного роста (от 110 до 220 см)
	Human hGen{ surname, name, weight, height, gender }; // Создание нового объекта типа Human с сгенерированными значениями
	return hGen; // Возвращение созданного объекта
}

// Функция для расчета среднего веса в массиве
void fillHumanArray(vector<Human>& humans, int size)
{
	for (int i = 0; i < size; i++) {
		humans.push_back(GeneratedHuman());
	}
}

// Функция для расчета среднего роста в массиве
double averageWeight(vector<Human>& humans) {
	double avgWeight = 0;
	for (Human human : humans)
	{
		avgWeight += human.Weight();
	}
	avgWeight /= humans.size();
	return avgWeight;  // Возвращаем средний вес
}

// Функция для расчета среднего роста в массиве
double averageHeight(vector<Human>& humans) {
	double avgHeight = 0;
	for (Human human : humans)
	{
		avgHeight += human.Height();
	}
	avgHeight /= humans.size();
	return avgHeight; // Возвращаем средний рост
}

// Функция для печати информации о людях и их средних значениях
void printHumanAndAvg(vector<Human>& humans)
{
	// Проходим по каждому объекту Human в векторе
	for (Human human : humans) {
	   // Выводит информацию о человеке, полученную с помощью метода GetInfoPerson()
	   cout << human.GetInfoPerson() << endl;
	   cout << "\nСредний вес: " << avgWeight << " кг.\n";
	   cout << "Средний рост: " << avgHeight << " см.\n";
	}	
}

// Функция для сортировки массива по весу
void sortByHeight(vector<Human>& humans) {
	for (size_t i = 0; i < humans.size() - 1; i++) {
		for (size_t j = 0; j < humans.size() - i - 1; j++) {
			if (humans[j].Height() > humans[j + 1].Height()) {
				swap(humans[j], humans[j + 1]);
			}
		}
	}
}

// Функция для сортировки массива по росту
void sortByWeight(vector<Human>& humans) {
	for (size_t i = 0; i < humans.size() - 1; i++) {
		for (size_t j = 0; j < humans.size() - i - 1; j++) {
			if (humans[j].Weight() > humans[j + 1].Weight()) {
				swap(humans[j], humans[j + 1]);
			}
		}
	}
}

// Функция для печати отсортированного списка людей
void printHumanSort(vector<Human>& humans) {
	for (Human human : humans) {
		cout << human.GetInfoPerson() << endl;
	}
}